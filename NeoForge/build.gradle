plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.192'
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    maven {
    	// location of the maven that hosts JEI files since January 2023
    	name = "Jared's maven"
    	url = "https://maven.blamejared.com/"
	}
	maven {
        url 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
	maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.architectury.dev/" }
    maven { url "https://maven.terraformersmc.com/releases/"}
}

base {
    archivesName = 'toms_storage-1.21.8'
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)
def useLib = System.getProperty("useLib")

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
//minecraft.accessTransformers.entry public net.minecraft.client.Minecraft textureManager # textureManager

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        arguments '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    /*data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        arguments '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }*/
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }
sourceSets {
	main {
		java {
			srcDir "src/platform-shared/java"
			/*if(!useLib)*/exclude "com/tom/storagemod/rei/**"
			if(!useLib)exclude "com/tom/storagemod/jei/**"
			if(!useLib)exclude "com/tom/storagemod/emi/**"
			if(!useLib)exclude "com/tom/storagemod/top/**"
			if(!useLib)exclude "com/tom/storagemod/jade/**"
			if(!useLib)exclude "com/tom/storagemod/polymorph/PolymorphTerminalWidget.java"
		}
		resources {
			srcDir "src/platform-shared/resources"
		}
	}
}

dependencies {
    // Specify the version of Minecraft to use.
    // Depending on the plugin applied there are several options. We will assume you applied the userdev plugin as shown above.
    // The group for userdev is net.neoforged, the module name is neoforge, and the version is the same as the neoforge version.
    // You can however also use the vanilla plugin (net.neoforged.gradle.vanilla) to use a version of Minecraft without the neoforge loader.
    // And its provides the option to then use net.minecraft as the group, and one of; client, server or joined as the module name, plus the game version as version.
    // For all intends and purposes: You can treat this dependency as if it is a normal library you would use.
    implementation "net.neoforged:neoforge:${neo_version}"

    // Example mod dependency with JEI
    // The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
    // compileOnly "mezz.jei:jei-${mc_version}-common-api:${jei_version}"
    // compileOnly "mezz.jei:jei-${mc_version}-forge-api:${jei_version}"
    // runtimeOnly "mezz.jei:jei-${mc_version}-forge:${jei_version}"

    // Example mod dependency using a mod jar from ./libs with a flat dir repository
    // This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
    // The group id is ignored when searching -- in this case, it is "blank"
    // implementation "blank:coolmod-${mc_version}:${coolmod_version}"

    // Example mod dependency using a file as dependency
    // implementation files("libs/coolmod-${mc_version}-${coolmod_version}.jar")

    // Example project dependency using a sister or child project:
    // implementation project(":myproject")

    // For more info:
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html   
    
    if(useLib) {
    	implementation "curse.maven:jade-324717:6669809"

        compileOnly "mezz.jei:jei-1.21.5-neoforge-api:21.3.2.22"
        compileOnly "mezz.jei:jei-1.21.5-common-api:21.3.2.22"
        // at runtime, use the full JEI jar
  	    runtimeOnly "mezz.jei:jei-1.21.5-neoforge:21.3.2.22"

        compileOnly "me.shedaniel:RoughlyEnoughItems-api-neoforge:19.0.806"
	    compileOnly "me.shedaniel:RoughlyEnoughItems-default-plugin-neoforge:19.0.806"
	    implementation "me.shedaniel:RoughlyEnoughItems-neoforge:19.0.806"
	    implementation "me.shedaniel.cloth:cloth-config-neoforge:18.0.145"
        implementation "dev.architectury:architectury-neoforge:16.1.4"
        
        runtimeOnly "top.theillusivec4.curios:curios-neoforge:11.0.1+1.21.5"
        compileOnly "top.theillusivec4.curios:curios-neoforge:11.0.1+1.21.5:api"

    	compileOnly "curse.maven:vivecraft-667903:6060497"
    	
    	compileOnly "dev.emi:emi-neoforge:1.1.7+1.21:api"
		runtimeOnly "dev.emi:emi-neoforge:1.1.7+1.21"
	
		implementation "curse.maven:polymorph-388800:5995380"
	
    	implementation "curse.maven:the-one-probe-245211:5502323"
    } else {
    	compileOnly files("libs/curios_dummy.jar")
    	compileOnly files("libs/vc_dummy.jar")
    	compileOnly files("libs/polymorph_dummy.jar")
    }
    
    compileOnly files("libs/iris.jar")
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description, pack_format_number: pack_format_number,
            file: [jarVersion: mod_version]
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

java {
    withSourcesJar()
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        def mavenURL = System.getProperty("mavenDir")
		if ("${mavenURL}" != "null") {
			maven {
				url = file(mavenURL)
			}
		}
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
